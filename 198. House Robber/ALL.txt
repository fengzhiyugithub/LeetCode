You are a professional robber planning to rob houses along a street. Each house has a certain amount of money stashed, the only constraint stopping you from robbing each of them is that adjacent houses have security system connected and **it will automatically contact the police if two adjacent houses were broken into on the same night**.

Given a list of non-negative integers representing the amount of money of each house, determine the maximum amount of money you can rob tonight **without alerting the police**.

**Example 1:**

```
Input: [1,2,3,1]
Output: 4
Explanation: Rob house 1 (money = 1) and then rob house 3 (money = 3).
             Total amount you can rob = 1 + 3 = 4.
```

**Example 2:**

```
Input: [2,7,9,3,1]
Output: 12
Explanation: Rob house 1 (money = 2), rob house 3 (money = 9) and rob house 5 (money = 1).
             Total amount you can rob = 2 + 9 + 1 = 12.
```

题意：一个数组隔项求和，求结果的最大值

分析：

一、隔项求和，简单想，直接判断奇偶(只要不是相邻项)再求和

二、DP,转移状态公式：dp[i]=max(dp[i-1], dp[i-2]+nums[i]), i>=2;

​					dp[0]=nums[0],dp[1]=max(nums[0], nums[1]);

```c++
/*
* @Author: yufeng
* @Date:   2018-10-13 11:24:23
* @Last Modified by:   yufeng
* @Last Modified time: 2018-10-13 11:33:29
* @Email: fzhiy270@sina.com
* @Blog: http://fzhiy.com/
*/
class Solution {
public:
    int rob(vector<int>& nums) {
  		int suma=0,sumb=0;
  		for(int i=0; i<nums.size(); i++){
  			if(i&1){
  				suma=max(sumb, suma+nums[i]);
  			}else {
  				sumb=max(suma, sumb+nums[i]);
  			}
  		}
  		return max(suma, sumb);
    }
};
```



```c++
//DP
class Solution {
public:
    int rob(vector<int>& nums) {
  		int len = nums.size();
  		if(!len) return 0;
  		if(len==1) return nums[0];
  		if(len==2) return max(nums[0], nums[1]);
  		std::vector<int> dp(len, 0);
  		dp[0]=nums[0],dp[1]=max(nums[0], nums[1]);
  		for(int i=2; i<len; i++){
  			// 要么前一项dp[i-1]大，要么是前前一项dp[i-2]+nums[i]大
  			dp[i]=max(dp[i-1], dp[i-2]+nums[i]);
  		}
  		return dp[len-1];
    }
};
```

