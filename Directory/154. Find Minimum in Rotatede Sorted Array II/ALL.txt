Suppose an array sorted in ascending order is rotated at some pivot unknown to you beforehand.

(i.e.,  `[0,1,2,4,5,6,7]` might become  `[4,5,6,7,0,1,2]`).

Find the minimum element.

The array may contain duplicates.

**Example 1:**

```
Input: [1,3,5]
Output: 1
```

**Example 2:**

```
Input: [2,2,2,0,1]
Output: 0
```

**Note:**

- This is a follow up problem to [Find Minimum in Rotated Sorted Array](https://leetcode.com/problems/find-minimum-in-rotated-sorted-array/description/).
- Would allow duplicates affect the run-time complexity? How and why?


  题意：找vector中最小的数  

分析：和T153类似， 区别是数据可能有重复

```c++
/*
* @Author: yufeng
* @Date:   2018-10-23 21:33:42
* @Last Modified by:   yufeng
* @Last Modified time: 2018-10-23 21:40:56
* @Email: fzhiy270@sina.com
* @Blog: http://fzhiy.com/
*/

class Solution {
public:
    int findMin(vector<int>& nums) {
        int l = 0, r = nums.size()-1;
        while (l<r){
        	int mid=(l+r)>>1;
        	if(nums[r]<nums[mid]) l=mid+1;
        	else if(nums[r]>nums[mid]) r=mid;
        	else r--; /// 与153题不同的是 nums中可能有重复的数据，因为找最小的数，所以r--
        }
        return nums[l];
    }
};
```

```python
# -*- coding: utf-8 -*-
# @Author: yufeng
# @Date:   2018-10-23 21:41:13
# @Last Modified by:   yufeng
# @Last Modified time: 2018-10-23 21:45:31
# @Email: fzhiy270@sina.com
# @Blog: http://fzhiy.com/

class Solution:
    def findMin(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        l, r = 0, len(nums)-1
        while l<r:
        	mid = (l+r)>>1
        	if nums[r]<nums[mid]:
        		l=mid+1
        	elif nums[r]>nums[mid]:
        		r=mid
        	else :
        		r-=1
        return nums[l]

class Solution:
    def findMin(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        # return sorted(nums)[0]
        return sorted(list(set(nums)))[0]
```

]
        # return sorted(nums)[0]
​        return sorted(list(set(nums)))[0]