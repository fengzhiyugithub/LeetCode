Given an array of numbers `nums`, in which exactly two elements appear only once and all the other elements appear exactly twice. Find the two elements that appear only once.

**Example:**

```
Input:  [1,2,1,3,2,5]
Output: [3,5]
```

**Note**:

1. The order of the result is not important. So in the above example, `[5, 3]` is also correct.
2. Your algorithm should run in linear runtime complexity. Could you implement it using only constant space complexity?

分析：先求出所有整数的异或和，求得的结果sum表示两个数不同的二进制位。sum最多有２个二进制位为1,其他都为０。那么接下来求得第一个１所在的位置。　第三个for循环理解为**分组**，分成相同位置上为1和０两组，可以分析得到**偶数次的数一定会在同一组，出现一次的两个数一定在不同组。因此最后的异或值即为所求。**

```c++
/*
* @Author: yufeng
* @Date:   2018-10-08 16:18:54
* @Last Modified by:   yufeng
* @Last Modified time: 2018-10-08 16:19:09
*/
class Solution {
public:
    vector<int> singleNumber(vector<int>& nums) {
        vector<int>res(2, 0);
        int sum=0,index=0;
        for(auto x: nums){
            sum^=x;
        }
        for(index=0; index<32; index++){
            if(sum&(1<<index)){
                break;
            }
        }
        for(auto x: nums){
            if(x&(1<<index)){
                res[0]^=x;
            }else {
                res[1]^=x;
            }
        }
        return res;
    }
};
```

