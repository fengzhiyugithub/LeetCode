The count-and-say sequence is the sequence of integers with the first five terms as following:

```
1.     1
2.     11
3.     21
4.     1211
5.     111221
```

`1` is read off as `"one 1"` or `11`.
`11` is read off as `"two 1s"` or `21`.
`21` is read off as `"one 2`, then `one 1"` or `1211`.

Given an integer *n* where 1 ≤ *n* ≤ 30, generate the *n*th term of the count-and-say sequence.

Note: Each term of the sequence of integers will be represented as a string.

 

**Example 1:**

```
Input: 1
Output: "1"
```

**Example 2:**

```
Input: 4
Output: "1211"
```

题意：下一个字符串是上一个字符串的读法

```c++
class Solution {
public:
    string countAndSay(int n) {
        string res = "1";
        for(int k=1; k<n; k++){
        	string t="";
        	for(int i=0, tmp; i<res.length(); i=tmp){
        		int cnt=1;
        		tmp=i;
        		while(tmp+1<res.length()&&res[tmp]==res[tmp+1]){
        			tmp++;
        			cnt++;
        		}
        		tmp++;
        		t+=to_string(cnt)+res[i];
        	}
        	res=t;
        }
        return res;
    }
};
```

```python
# -*- coding: utf-8 -*-
# @Author: yufeng
# @Date:   2018-10-25 18:11:42
# @Last Modified by:   yufeng
# @Last Modified time: 2018-10-25 19:21:33
# @Email: fzhiy270@sina.com
# @Blog: http://fzhiy.com/

class Solution:
    def countAndSay(self, n):
        """
        :type n: int
        :rtype: str
        """
        res = "1"
        for k in range(1, n):
        	ch, t, cnt = res[0], "", 0
        	for ch2 in res:
        		if ch2 == ch:
        			cnt+=1
        		else :
        			t+=str(cnt)+ch
        			ch, cnt = ch2, 1
        	t+=str(cnt)+ch
        	res=t
        return res
```

