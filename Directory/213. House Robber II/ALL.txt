You are a professional robber planning to rob houses along a street. Each house has a certain amount of money stashed. All houses at this place are **arranged in a circle.** That means the first house is the neighbor of the last one. Meanwhile, adjacent houses have security system connected and **it will automatically contact the police if two adjacent houses were broken into on the same night**.

Given a list of non-negative integers representing the amount of money of each house, determine the maximum amount of money you can rob tonight **without alerting the police**.

**Example 1:**

```
Input: [2,3,2]
Output: 3
Explanation: You cannot rob house 1 (money = 2) and then rob house 3 (money = 2),
             because they are adjacent houses.
```

**Example 2:**

```
Input: [1,2,3,1]
Output: 4
Explanation: Rob house 1 (money = 1) and then rob house 3 (money = 3).
             Total amount you can rob = 1 + 3 = 4.
```

分析： 参考：https://leetcode.com/problems/house-robber-ii/discuss/164055/Python-or-tm

这道题相对于House Robber I里面要解决的edge就是circle的头和尾不能为邻居，那我们只需要在之前写好的代码基础上计算两个区间即可，第一个区间是nums[1:]， 第二个区间是nums[:-1]，在比较这两个区间哪个大即可。



![img](https://raw.githubusercontent.com/yuzhoujr/spazzatura/master/img_box/213.jpeg)



如上面的例图，对于`[3, 10, 7]`这个数组，其实我们要做的就将其分成两个数组:
数组1: `[3, 10]` ,也就是 `nums[:-1]`
数组2: `[10, 7]`, 也就是`nums[1:]`
然后用求出这两个区间中的最大值即可。

```python
class Solution(object):
    def rob(self, nums):
        if not nums: return 0
        if len(nums) <= 2: return max(nums)
        return max(self.rob_row(nums[1:]), self.rob_row(nums[:-1]))

    def rob_row(self, nums):
        res = [0] * len(nums)
        res[0], res[1] = nums[0], max(nums[0], nums[1])
        
        for i in range(2, len(nums)):
            res[i] = max(res[i-1], res[i-2] + nums[i])

        return res[-1]
```

res[i]只与前两项有关，可以利用滚动数组优化

```python
# -*- coding: utf-8 -*-
# @Author: yufeng
# @Date:   2018-10-15 18:12:45
# @Last Modified by:   yufeng
# @Last Modified time: 2018-10-15 18:16:28
# @Email: fzhiy270@sina.com
# @Blog: http://fzhiy.com/

class Solution:
    def rob(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        if not nums: return 0
        if len(nums) <= 2: return max(nums)
        return max(self.rob_row(nums[1:]), self.rob_row(nums[:-1]))

    def rob_row(self, nums):
    	res = [0]*2
    	res[0], res[1] = nums[0], max(nums[0], nums[1])
    	for i in range(2, len(nums)):
    		res[i%2] = max(res[(i-1)%2], res[(i-2)%2] + nums[i])
    	return max(res[0], res[1])
```