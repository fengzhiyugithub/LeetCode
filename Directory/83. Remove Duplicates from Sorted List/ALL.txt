Given a sorted linked list, delete all duplicates such that each element appear only once.

Example 1:

Input: 1->1->2
Output: 1->2
Example 2:

Input: 1->1->2->3->3
Output: 1->2->3

题意：给出一个非递减的链表，删除重复的节点（只保留其中一个）
分析：考察单链表节点的删除

C++

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* deleteDuplicates(ListNode* head) {
        ListNode* cur=head;
        while(cur){
            while(cur->next && cur->next->val==cur->val) cur->next=cur->next->next;
            cur=cur->next;
        }
        return head;
    }
};

Python

# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution:
    def deleteDuplicates(self, head):
        """
        :type head: ListNode
        :rtype: ListNode
        """
        cur = head
        while(cur!=None):
            while(cur.next!=None and cur.val==cur.next.val):
                cur.next=cur.next.next
            cur=cur.next
        return head
