Write a function to find the longest common prefix string amongst an array of strings.

If there is no common prefix, return an empty string "".

Example 1:

Input: ["flower","flow","flight"]
Output: "fl"
Example 2:

Input: ["dog","racecar","car"]
Output: ""
Explanation: There is no common prefix among the input strings.
Note:

All given inputs are in lowercase letters a-z.


分析：
1、判断是否是公共前缀，高效解法可以构建Trie树，这里使用indexOf()判断子串第一次出现的位置是否为0 
2、sort排序，直接比较第一个字符串与最后一个字符串的公共子串。

import java.util.HashMap;

public class Solution {
    public String longestCommonPrefix(String[] strs) {
        if (strs.length == 0)
            return "";
        String prefix = strs[0];
        for (int i = 1; i < strs.length; i++) {
            while (strs[i].indexOf(prefix) != 0) {
                prefix = prefix.substring(0, prefix.length() - 1);
            }
        }
        return prefix;
    }

    public static void main(String[] args) {
        String strs[] = { "flower", "flow", "flight" };
        String reString = new Solution().longestCommonPrefix(strs);
        System.out.println(reString);
    }
}


import java.util.Arrays;
import java.util.HashMap;

public class Solution {
    public String longestCommonPrefix(String[] strs) {
        if (strs.length == 0)
            return "";
        Arrays.sort(strs);
        StringBuffer reStringBuffer = new StringBuffer();
        char[] a = strs[0].toCharArray();
        char[] b = strs[strs.length - 1].toCharArray();
        for (int i = 0; i < a.length; i++) {
            if (b.length > i && b[i] == a[i]) {
                reStringBuffer.append(b[i]);
            } else {
                break;
            }
        }
        return reStringBuffer.toString();
    }

    public static void main(String[] args) {
        String strs[] = { "flower", "flow", "flight" };
        String reString = new Solution().longestCommonPrefix(strs);
        System.out.println(reString);
    }
}
