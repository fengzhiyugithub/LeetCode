Given an integer array of size *n*, find all elements that appear more than `⌊ n/3 ⌋` times.

**Note:** The algorithm should run in linear time and in O(1) space.

**Example 1:**

```
Input: [3,2,3]
Output: [3]
```

**Example 2:**

```
Input: [1,1,1,3,3,2,2,2]
Output: [1,2]

分析：找出所有出现超过n/3次的数，那么至多有两个数。
有一种解法是叫摩尔投票法。 两个变量a,b分别记录两个值，cnta,cntb表示对应的次数。具体详见代码
```

```c++
/*
* @Author: yufeng
* @Date:   2018-10-12 16:30:11
* @Last Modified by:   yufeng
* @Last Modified time: 2018-10-12 16:37:19
* @Email: fzhiy270@sina.com
* @Blog: http://fzhiy.com/
*/
class Solution {
public:
    vector<int> majorityElement(vector<int>& nums) {
  		int cnta=0,cntb=0;
  		int a,b;
  		for(auto& num: nums){
  			if(a==num){
  				cnta++;
  			}else if(b==num){
  				cntb++;
  			}else if(cnta==0){
  				a=num;
  				cnta=1;
  			}else if(cntb==0){
  				b=num;
  				cntb=1;
  			}
  			else {
  				cnta--,cntb--;
  			}
  		}
  		cnta=cntb=0;
  		for(auto& num:nums){
  			if(num==a) cnta++;
  			else if(num==b) cntb++;
  		}
  		std::vector<int> v;
  		if(cnta>nums.size()/3) {
  			v.push_back(a);
  		}
  		if(cntb>nums.size()/3){
  			v.push_back(b);
  		}
  		return v;
    }
};
```

