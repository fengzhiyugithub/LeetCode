Merge two sorted linked lists and return it as a new list. The new list should be made by splicing together the nodes of the first two lists.

**Example:**

```
Input: 1->2->4, 1->3->4
Output: 1->1->2->3->4->4
```

题意：链表的合并

```c++
/*
* @Author: yufeng
* @Date:   2018-10-25 17:25:43
* @Last Modified by:   yufeng
* @Last Modified time: 2018-10-25 17:29:00
* @Email: fzhiy270@sina.com
* @Blog: http://fzhiy.com/
*/

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {
        if(l1!=NULL && l2!=NULL){
        	if(l1->val > l2->val){
        		ListNode* tmp=l1;
        		l1=l2;
        		l2=tmp;
        	}
        	l1->next=mergeTwoLists(l1->next, l2);
        }
        return l1?l1:l2;
    }
};
```

```python
# -*- coding: utf-8 -*-
# @Author: yufeng
# @Date:   2018-10-25 17:21:59
# @Last Modified by:   yufeng
# @Last Modified time: 2018-10-25 17:24:09
# @Email: fzhiy270@sina.com
# @Blog: http://fzhiy.com/

# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution:
    def mergeTwoLists(self, l1, l2):
        """
        :type l1: ListNode
        :type l2: ListNode
        :rtype: ListNode
        """
        if l1 and l2:
        	if l1.val>l2.val:
        		l1, l2 = l2, l1
        	l1.next = self.mergeTwoLists(l1.next, l2)
        return l1 or l2
```

