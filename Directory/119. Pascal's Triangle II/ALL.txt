Given a non-negative index *k* where *k* ≤ 33, return the *k*th index row of the Pascal's triangle.

Note that the row index starts from 0.

![img](https://upload.wikimedia.org/wikipedia/commons/0/0d/PascalTriangleAnimated2.gif)
In Pascal's triangle, each number is the sum of the two numbers directly above it.

**Example:**

```
Input: 3
Output: [1,3,3,1]
```

**Follow up:**

Could you optimize your algorithm to use only *O*(*k*) extra space?

题意：Pascal三角

```c++
/*
* @Author: yufeng
* @Date:   2018-10-18 22:51:28
* @Last Modified by:   yufeng
* @Last Modified time: 2018-10-18 22:55:09
* @Email: fzhiy270@sina.com
* @Blog: http://fzhiy.com/
*/

class Solution {
public:
    vector<int> getRow(int rowIndex) {
    	std::vector<int> res={1};
        for (double i=1; i<=rowIndex; i++){
        	res.push_back(res.back()*(rowIndex-i+1)/i);
        }
        return res;
    }
};
```

```python
# -*- coding: utf-8 -*-
# @Author: yufeng
# @Date:   2018-10-18 22:29:46
# @Last Modified by:   yufeng
# @Last Modified time: 2018-10-18 22:37:47
# @Email: fzhiy270@sina.com
# @Blog: http://fzhiy.com/

#  52ms beats 20.67%
#  zip(row, row) 压缩返回一个对象 zip(*)解压缩转化为列表
class Solution:
    def getRow(self, rowIndex):
        """
        :type rowIndex: int
        :rtype: List[int]
        """
        row = [1]
        for _ in range(rowIndex):
        	row = [x+y for x,y in zip([0]+row, row+[0])]
        return row
```

